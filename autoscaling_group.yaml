# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-launchtemplate.html 
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-autoscalinggroup.html 
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-scalingpolicy.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-autoscaling-scheduledaction.html
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudwatch-alarm.html
# https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/application-insights-recommended-metrics.html

Description: This template sets up the launch template, autoscaling group, scaling policies and associated alarms.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: devops2

  WebServerAMI:
    Description: AMI ID from custom image on the console for web server
    Type: AWS::EC2::Image::Id
    Default: ami-082d160f4bd6aeb34
  
  EmailAddress:
    Description: Email address to notify if there are any scaling issues
    Type: String
    Default: 20104299@mail.wit.ie

  # WebServerInstance:
  #   Type: AWS::EC2::Instance
  #   Properties:
  #     InstanceType: !Ref InstanceType
  #     ImageId: !Ref WebServerAMI
  #     KeyName: !Ref KeyName
  #     SecurityGroupIds:
  #       - !Ref WebServerSG
  #     SubnetId: !Select [ 0, !Ref VPCStack.Outputs.PublicSubnetIds ]
  #     UserData:
  #       Fn::Base64: !Sub |
  #        - !Ref UserData
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${EnvironmentName} Web Server

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: InstanceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/myCustomerManagedPolicy'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref InstanceRole
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName} LaunchTemplate
      LaunchTemplateData:
        ImageId: !Ref WebServerAMI
        InstanceType: !GetAtt InstanceStack.Outputs.InstanceType
        KeyName: !GetAtt InstanceStack.Outputs.KeyName
        SecurityGroupIds:
          - !GetAtt SecurityGroupStack.Outputs.LaunchTemplateSG
        vpcId: !GetAtt VPCStack.Outputs.VPCId
        IamInstanceProfile:
          Name: !Ref InstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<html><h1>Hello World</h1></html>" > /var/www/html/index.html
        Monitoring:
          Enabled: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName} WebServerInstance
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName} AutoScalingGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 2
      vpcId: !GetAtt VPCStack.Outputs.VPCId
      VPCZoneIdentifier:
        - !Select [ 0, !Ref VPCStack.Outputs.PublicSubnetIds ]
        - !Select [ 1, !Ref VPCStack.Outputs.PublicSubnetIds ]
        - !Select [ 2, !Ref VPCStack.Outputs.PublicSubnetIds ]
      MetricsCollection:
        - Granularity: 1Minute
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} AutoScaleWebServer
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true
  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      MetricAggregationType: Average
      StepAdjustments: 
        - MetricIntervalLowerBound: '0'
          MetricIntervalUpperBound: '10'
          ScalingAdjustment: '1'
        - MetricIntervalLowerBound: '10'
          MetricIntervalUpperBound: '20'
          ScalingAdjustment: '2'
        - MetricIntervalLowerBound: '20'
          ScalingAdjustment: '3'
  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: StepScaling
      AdjustmentType: ChangeInCapacity
      MetricAggregationType: Average
      StepAdjustments: 
        - MetricIntervalLowerBound: '-10'
          MetricIntervalUpperBound: '0'
          ScalingAdjustment: '1'
        - MetricIntervalLowerBound: '-20'
          MetricIntervalUpperBound: '-10'
          ScalingAdjustment: '2'
        - MetricIntervalUpperBound: '-20'
          ScalingAdjustment: '3'
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 50
      AlarmDescription: 'Scales instances up based on CPU utilization'
      Period: 60
      AlarmActions:
      - !Ref ScaleOutPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref AutoScalingGroup
      - Name: InstanceId
        Value:
          !Ref WebServerInstance
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUUtilization
  LowCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Average
      Threshold: 20
      AlarmDescription: 'Scales instances down based on CPU utilization'
      Period: 60
      AlarmActions:
      - !Ref ScaleInPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref AutoScalingGroup
      - Name: InstanceId
        Value:
          !Ref WebServerInstance
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: CPUUtilization
  StatusCheckFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: 2
      Statistic: Maximum
      Threshold: 1
      AlarmDescription: 'Sends a notification if instances fail status check'
      Period: 300
      AlarmActions:
      - !Ref SNSTopic
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref AutoScalingGroup
      - Name: InstanceId
        Value:
          !Ref WebServerInstance
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: StatusCheckFailed
  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${EnvironmentName} StatusCheckFailed SNS Topic
      TopicName: Status Check Failed SNS Topic
  SNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref SNSTopic
      Endpoint: !Ref EmailAddress
  
